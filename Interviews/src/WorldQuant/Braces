/*
 * Complete the function below.
 */
bool ArePair(char opening,char closing)
{
	if(opening == '(' && closing == ')') return true;
	else if(opening == '{' && closing == '}') return true;
	else if(opening == '[' && closing == ']') return true;
	return false;
}
bool braces_helper(string exp){
    stack<char>  S;
	for(int i =0;i<exp.length();i++)
	{
		if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')
			S.push(exp[i]);
		else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')
		{
			if(S.empty() || !ArePair(S.top(),exp[i]))
				return false;
			else
				S.pop();
		}
	}
	return S.empty() ? true:false;
}
vector < string > braces(vector < string > values) {
    vector<string> res;
    for(int i=0;i<values.size();i++){
        if(braces_helper(values.at(i))==true){
            res.push_back("YES");
        }else
            {
            res.push_back("NO");
        }
    }
    return res;

}


