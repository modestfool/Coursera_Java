/**
 * Copyright 2015, Emory University
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package edu.emory.mathcs.nlp.demo;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import edu.emory.mathcs.nlp.common.util.IOUtils;
import edu.emory.mathcs.nlp.common.util.Joiner;
import edu.emory.mathcs.nlp.component.template.node.NLPNode;
import edu.emory.mathcs.nlp.component.tokenizer.EnglishTokenizer;
import edu.emory.mathcs.nlp.component.tokenizer.Tokenizer;
import edu.emory.mathcs.nlp.component.tokenizer.token.Token;
import edu.emory.mathcs.nlp.decode.NLPDecoder;

/**
 * @author Jinho D. Choi ({@code jinho.choi@emory.edu})
 */
public class NLPDecoderCSV
{
	public static void main(String[] args) throws Exception
	{
		final String configurationFile = "edu/emory/mathcs/nlp/configuration/config-decode-en.xml";
		
		NLPDecoder decoder = new NLPDecoder(IOUtils.getInputStream(configurationFile));
		
		final String impressionsPath = "/Users/basavakanaparthi/Documents/odrive/Google Drive"
											+ "/Stony Brook/Stony Brook University/Spring 2016/CSE 523 Adv. Proj IV/"
											+ "Ipython Notebooks/Impressions_Keywords.csv";
		final String outputPath = "/Users/basavakanaparthi/Documents/odrive/Google Drive"
									+ "/Stony Brook/Stony Brook University/Spring 2016/CSE 523 Adv. Proj IV/"
									+ "data/parser output/nlp4j dependency trees";


    
    Tokenizer tokenizer = new EnglishTokenizer();
	NLPNode[] nodes;
	List<List<Token>> sentences;
	
	OutputStream out;
	
	Pattern re = Pattern.compile
			("[^.!?\\s][^.!?]*(?:[.!?](?!['\"]?\\s|$)[^.!?]*)*[.!?]?['\"]?(?=\\s|$)", 
					Pattern.MULTILINE | Pattern.COMMENTS);
	String list = "^[\\d]+\\.";
	Pattern list_item = Pattern.compile(list);
    String f = "1";
	String filename = f ; //f.getName();	
	out = new BufferedOutputStream(new FileOutputStream(outputPath + "/" + f ));
			System.out.println("\n" + f);
			BufferedReader in = IOUtils.createBufferedReader(impressionsPath + "/" + f);
			String line;
			StringBuilder textBuilder = new StringBuilder();
			while((line = in.readLine()) != null)
			{
				String line_lower = line.toLowerCase();
				if (line_lower.contains("impression") && !line_lower.endsWith("."))
					line = line + ".";
			    Matcher reMatcher = re.matcher(line.trim());
			    while (reMatcher.find()) {
			    	String g = reMatcher.group();
			    	if(g.matches(list))
			    	{
			    		System.out.println("---------------");
			    		System.out.println(g);
			    		System.out.println("---------------");
			    		continue;
			    	}
			    	textBuilder.append(g+"\n");
			    	
			    }
//				tokens = tokenizer.tokenize(line);
//				System.out.println(Joiner.join(tokens, " "));
			}
			String text = textBuilder.toString();
			System.out.println("Body of the text: =======================");
			System.out.println(text);
			System.out.println("=======================");
			sentences = tokenizer.segmentize(text);
//			System.out.println(sentences.toString());
			for(List<Token> sentence:sentences)
			{
				StringBuilder sentenceBuilder = new StringBuilder();
				for(Token t: sentence)
					sentenceBuilder.append(t +"  ");
				nodes = decoder.decode(sentenceBuilder.toString());
				String n = Joiner.join(nodes, "\n", 1);
				System.out.println();
				System.out.println(n);
				out.write((n + "\n\n\n").getBytes());
			}
			out.flush();
			out.close();
		}
}
